// <auto-generated />
using System;
using DataBaseLoginPassword;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataBaseLoginPassword.Migrations
{
    [DbContext(typeof(UserContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataBaseLoginPassword.DB.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 0,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 1,
                            Name = "Founder"
                        },
                        new
                        {
                            RoleId = 2,
                            Name = "Follower"
                        });
                });

            modelBuilder.Entity("DataBaseLoginPassword.DB.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("password");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Salt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("salt");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex("Name", "RoleId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("808d561f-66a0-46bb-a7f3-173ac34bb0bb"),
                            Name = "KrotovAV@tut.by",
                            Password = new byte[] { 127, 199, 81, 185, 109, 169, 92, 155, 139, 226, 106, 166, 80, 6, 20, 16, 80, 81, 74, 115, 130, 4, 43, 185, 49, 244, 147, 61, 25, 254, 194, 221, 236, 17, 70, 145, 19, 53, 169, 4, 220, 36, 155, 201, 188, 243, 236, 36, 173, 23, 15, 92, 12, 188, 83, 18, 106, 161, 103, 85, 109, 139, 109, 62 },
                            RoleId = 0,
                            Salt = new byte[] { 130, 166, 203, 27, 198, 183, 112, 134, 155, 195, 16, 227, 140, 159, 86, 14 }
                        },
                        new
                        {
                            Id = new Guid("c8820378-482a-4627-87fe-4a6d67436519"),
                            Name = "KrotovAV@tut.by",
                            Password = new byte[] { 98, 234, 85, 213, 149, 221, 253, 126, 159, 67, 227, 98, 18, 254, 113, 252, 205, 200, 108, 162, 150, 177, 131, 7, 32, 169, 65, 159, 228, 47, 75, 43, 162, 127, 186, 99, 168, 182, 159, 137, 73, 182, 245, 142, 129, 134, 11, 2, 146, 46, 217, 221, 95, 206, 178, 234, 193, 172, 172, 156, 31, 46, 255, 206 },
                            RoleId = 1,
                            Salt = new byte[] { 146, 155, 75, 36, 46, 250, 200, 196, 39, 104, 242, 215, 64, 107, 211, 255 }
                        },
                        new
                        {
                            Id = new Guid("fba18122-d941-4ecb-a786-9bb7bdb6fc40"),
                            Name = "KrotovAV@tut.by",
                            Password = new byte[] { 232, 136, 11, 186, 146, 87, 208, 192, 226, 20, 233, 13, 100, 135, 78, 100, 94, 2, 162, 127, 234, 221, 204, 158, 163, 53, 250, 121, 193, 74, 89, 47, 252, 117, 72, 35, 165, 189, 250, 85, 145, 147, 78, 210, 226, 32, 97, 183, 39, 240, 222, 134, 82, 239, 63, 182, 125, 254, 32, 45, 149, 152, 69, 187 },
                            RoleId = 2,
                            Salt = new byte[] { 69, 34, 242, 91, 47, 163, 84, 237, 17, 78, 141, 42, 98, 208, 227, 61 }
                        });
                });

            modelBuilder.Entity("DataBaseLoginPassword.DB.User", b =>
                {
                    b.HasOne("DataBaseLoginPassword.DB.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataBaseLoginPassword.DB.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
